AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Sample SAM App

Parameters:
  ApigwEndpoint:
    Type: String
    Description: Endpoint for local API Gateway access by end user
    Default: ""

  EnvironmentType:
    Type: String
    Description: API Gateway deployment stage
    Default: dev
    AllowedValues: [dev, prod, sam]

  Endpoint:
    Type: String
    Description: Endpoint for local AWS resource access within app
    Default: ""

Conditions:
  IsLocal:
    Fn::Not:
      - Fn::Equals:
          - Ref: Endpoint
          - ""

  IsSam:
    Fn::Equals:
      - Ref: EnvironmentType
      - sam

Globals:
  Function:
    Handler: app.handler
    Runtime: python3.9
    Timeout: 10
    Environment:
      Variables:
        ENDPOINT:
          Ref: Endpoint
        EXECUTION_TABLE:
          Ref: ExecutionTable
        LOTTERY_TABLE:
          Ref: LotteryTable
    Architectures:
      - x86_64

Resources:
  # IAM managed policies
  DynamoDBAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Policy for accessing DynamoDBs
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:Scan
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
            Resource:
              - "*"

  InvokeFunctionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Policy for invoking Lambda functions
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource:
              - "*"

  StartExecutionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Policy for executing state machines
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - states:StartExecution
            Resource:
              - "*"

  # DynamoDB tables
  ExecutionTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      TableName:
        Fn::If:
          - IsLocal
          - ExecutionTable
          - Ref: AWS::NoValue

  LotteryTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      TableName:
        Fn::If:
          - IsLocal
          - LotteryTable
          - Ref: AWS::NoValue

  # Lambda functions
  InitializeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/initialize
      Description: Do initialization tasks
      FunctionName:
        Fn::If:
          - IsLocal
          - InitializeFunction
          - Ref: AWS::NoValue
      Policies:
        - Ref: DynamoDBAccessPolicy

  ProcessFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/process
      Description: Process data
      FunctionName:
        Fn::If:
          - IsLocal
          - ProcessFunction
          - Ref: AWS::NoValue
      Policies:
        - Ref: DynamoDBAccessPolicy

  FinalizeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/finalize
      Description: Do finalization tasks
      FunctionName:
        Fn::If:
          - IsLocal
          - FinalizeFunction
          - Ref: AWS::NoValue
      Policies:
        - Ref: DynamoDBAccessPolicy

  # State machines
  LotteryStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Definition:
        Comment: Buy some lotteries
        StartAt: Initialize
        States:
          Initialize:
            Type: Task
            Resource: { Fn::GetAtt: InitializeFunction.Arn }
            # Resource: arn:aws:lambda:ap-northeast-1:000000000000:function:InitializeFunction
            Parameters:
              amount.$: $.amount
              executionId.$: $$.Execution.Name
            ResultPath: $
            Next: ProcessData
          ProcessData:
            Type: Map
            ItemsPath: $.packs
            MaxConcurrency: 2
            Parameters:
              pack.$: $$.Map.Item.Value
              executionId.$: $.executionId
            Iterator:
              StartAt: Process
              States:
                Process:
                  Type: Task
                  Resource: { Fn::GetAtt: ProcessFunction.Arn }
                  # Resource: arn:aws:lambda:ap-northeast-1:000000000000:function:ProcessFunction
                  End: true
            ResultPath: $.winnings
            Next: Finalize
          Finalize:
            Type: Task
            Resource: { Fn::GetAtt: FinalizeFunction.Arn }
            # Resource: arn:aws:lambda:ap-northeast-1:000000000000:function:FinalizeFunction
            End: true
      Name:
        Fn::If:
          - IsLocal
          - LotteryStateMachine
          - Ref: AWS::NoValue
      Policies:
        - Ref: InvokeFunctionPolicy

  # REST API
  HelloWorldApi:
    Type: AWS::Serverless::Api
    Properties:
      Description: Hello World REST API
      Models: # doesn't work in LocalStack
        StartExecutionInput:
          $schema: http://json-schema.org/draft-04/schema#
          title: StartExecutionInput
          type: object
          required: [amount]
          properties:
            amount:
              type: integer
      Name:
        Fn::If:
          - IsLocal
          - HelloWorldApi
          - Ref: AWS::NoValue
      StageName:
        Ref: EnvironmentType

  # Lambda functions (REST API)
  ListExecutionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/list_executions
      Description: List execution
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: GET
            Path: /
            RestApiId:
              Ref: HelloWorldApi
      FunctionName:
        Fn::If:
          - IsLocal
          - ListExecutionsFunction
          - Ref: AWS::NoValue
      Policies:
        - Ref: DynamoDBAccessPolicy

  ListLotteriesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/list_lotteries
      Description: List lotteries
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: GET
            Path: /lotteries
            RequestParameters:
              - method.request.querystring.execution-id
            RestApiId:
              Ref: HelloWorldApi
      FunctionName:
        Fn::If:
          - IsLocal
          - ListLotteriesFunction
          - Ref: AWS::NoValue
      Policies:
        - Ref: DynamoDBAccessPolicy

  StartExecutionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/start_execution
      Description: Start execution
      Environment:
        Variables:
          STATE_MACHINE_ARN:
            Fn::If:
              - IsSam
              - Fn::Sub: arn:aws:states:${AWS::Region}:000000000000:stateMachine:${LotteryStateMachine}
              - Ref: LotteryStateMachine
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: POST
            Path: /
            RequestModel: # doesn't work in LocalStack
              Model: StartExecutionInput
              Required: true
              ValidateBody: true
              ValidateParameters: false
            RestApiId:
              Ref: HelloWorldApi
      FunctionName:
        Fn::If:
          - IsLocal
          - StartExecutionFunction
          - Ref: AWS::NoValue
      Policies:
        - Ref: StartExecutionPolicy

Outputs:
  HelloWorldApi:
    Value:
      Fn::If:
        - IsLocal
        - Fn::Sub: ${ApigwEndpoint}/restapis/${HelloWorldApi}/${HelloWorldApi.Stage}/_user_request_/
        - Fn::Sub: https://${HelloWorldApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${HelloWorldApi.Stage}/
